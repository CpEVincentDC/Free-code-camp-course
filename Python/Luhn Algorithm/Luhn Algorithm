def verify_card_number(card_number):
    # Initialize sum of odd digits to 0
    sum_of_odd_digits = 0
    
    # Reverse the card number to make it easier to process
    card_number_reversed = card_number[::-1]
    
    # Extract odd digits (every other digit starting from the right)
    odd_digits = card_number_reversed[::2]
    
    # Sum up the odd digits
    for digit in odd_digits:
        sum_of_odd_digits += int(digit)
    
    # Initialize sum of even digits to 0
    sum_of_even_digits = 0
    
    # Extract even digits (every other digit starting from the right, skipping the first one)
    even_digits = card_number_reversed[1::2]
    
    # Process even digits according to Luhn algorithm
    for digit in even_digits:
        number = int(digit) * 2  # Double the digit
        if number >= 10:  # If the result is 10 or more, add the digits together
            number = (number // 10) + (number % 10)
        sum_of_even_digits += number  # Add the processed digit to the sum
    
    # Calculate the total sum
    total = sum_of_odd_digits + sum_of_even_digits
    
    # Print the total sum for debugging purposes
    print(total)
    
    # Return True if the total sum is divisible by 10, False otherwise
    return total % 10 == 0

def main():
    # Input card number with dashes
    card_number = '4111-1111-4555-1142'
    
    # Remove dashes and spaces from the card number
    card_translation = str.maketrans({'-': '', ' ': ''})
    translated_card_number = card_number.translate(card_translation)
    
    # Verify the card number using the Luhn algorithm
    if verify_card_number(translated_card_number):
        print('VALID!')
    else:
        print('INVALID!')

main()